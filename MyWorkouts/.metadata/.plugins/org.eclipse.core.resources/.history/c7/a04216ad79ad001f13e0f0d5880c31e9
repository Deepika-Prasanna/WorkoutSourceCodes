/*
 * Breaking Singleton Using Reflection:

	1. Getting the Constructor:
		The getDeclaredConstructor() method is used to get the private constructor of the Singleton class.
	2. Accessing the Constructor:
		constructor.setAccessible(true) allows access to the private constructor by making it accessible through reflection.
	3. Creating Instances:
		constructor.newInstance() creates a new instance of the Singleton class. Even though the constructor is private and the 
		class is designed to allow only a single instance, reflection allows the creation of multiple instances.
	4. Comparison:
		Finally, we print the instances and check if they are the same using ==. Since reflection bypasses the singleton check,
		 instance1 and instance2 will refer to different objects.
 * 
 */


package com.deepu.singletondesingpattern;

public class SingletonBreakExample {

	public static void main(String[] args) throws Exception {
		
		// First, get the Singleton class's constructor
		Class<SingletonEagerInitialization> singletonClass = SingletonEagerInitialization.class;
		
		
	}
}
